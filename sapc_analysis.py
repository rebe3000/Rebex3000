# -*- coding: utf-8 -*-
"""SAPc_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-znBZdgOzUcmXw3rVgt-hCvOVOWF0Ryq

# **Data analysis for SAPc Project**

Author: Rebecca Pabst </br>
Date: July 2023 </br>

In this notebook, I will be showing the data analysis for the SAP project done for the AIRCentre using R on Google Colab.

Project website: https://www.aircentre.io/app/sap/

## Installing libraries
"""

install.packages(c("arrow","ggmap"))

"""## Importing libraries"""

# Load packages
library(arrow)
library(ggplot2)
library(dplyr)
library(lubridate)
library(ggmap)
library(tidyr)

"""## Key for Google clouds API to access the background map

‚ö†Ô∏è Please note that you must obtain and insert your own key by creating a project on Google Clouds and enabling the Geolocation API and Maps JavaScript API.
"""

register_google(key = "insert key")

"""## Loading files
### save the files in your environment and change path if needed
- File with spore counts
- File with records from meteorological stations
- 2 Files with assignment of the meteorological stations to the sectors
"""

rm(list = ls())
map_expansion <- read_feather('/content/sporulation_to_rebecca.feather')
spores <- read_feather('/content/sporulation_to_rebecca.feather') #1900 spore counts, 1886 with sector_id
meteo <-  read_feather('/content/meteo_to_rebecca.feather')
stations <-  read_feather('/content/stations_to_rebecca.feather')
stationsupdate <- read.csv('/content/stations_updated.csv', header=T)

"""## Creating additional columns"""

# create date columns for year, month, day
spores$year <- year(spores$date)
spores$month <- month(spores$date)
spores$day <- day(spores$date)
meteo$date <- as.Date(meteo$timestamp)
spores$date <- as.Date(spores$date)

"""# ------------------------------ Part I ------------------------------
## Looking at all spore counts, from the first collection until the most recent
This also includes spore samples from 2020 for which the sector is not known.**bold text**
"""

colors <- c("#4C81E0", "#E06B58", "#E0A72B", "#36E095")

# Create the timeline plot
timeline <- ggplot(spores, aes(x = date, y = spores_gram, color = as.factor(year))) +
  geom_point() +
  xlab("Date") +
  ylab("Spores/g") +
  #ggtitle("Visualization of Spores_gram, Separated by Year") +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.border = element_rect(color = "black", fill = NA, size = 1.5)
  ) +
  scale_y_continuous(labels = scales::comma, limits = c(0, 2000000)) +
  labs(color = "Year") +
  # Set the custom color scale
  scale_color_manual(values = colors)

# Plot the timeline
plot(timeline)

"""## Cleaining data"""

# data manipulation
# remove rows that contain missing values in the "sector_letter" column
spores <- spores[complete.cases(spores$sector_letter), ]
spores$Sector_number <- as.numeric(spores$Sector_number)
# combine letter and number to id
spores$sector_id <- paste(spores$sector_letter, spores$Sector_number, sep = "")


#delete outliers from meteological stations, clean table
meteo <- subset(meteo, temperature_c <= 100)
meteo <- meteo[complete.cases(meteo$temperature_c), ]
meteo <- meteo[complete.cases(meteo$rel_humidity_pctg), ]

# delete double station of sector L24
stationsupdate <- stationsupdate[stationsupdate$station_id != "NVX_R712_00137A1000015795", ]

#keep only station_ids for which we know the sector
stationsupdate <- na.omit(stationsupdate[complete.cases(stationsupdate$sector_id), ])

# show data
head(stationsupdate)
head(meteo)

# add sector_id to meteo data
meteo <- na.omit(merge(meteo, stationsupdate[,c("sector_id", "station_id")], by = c("station_id"), all.x = TRUE, all = TRUE))

"""## Statistics

"""

# average per year + standard dev
spores_stats_year <- aggregate(spores$spores_gram, by = list(year = spores$year), FUN = function(x) c(mean = mean(x), sd = sd(x)))
colnames(spores_stats_year) <- c("Year", "spores")
print(spores_stats_year)

# average per month + standard dev
spores_stats_month <- aggregate(spores$spores_gram, by = list(year = spores$month), FUN = function(x) c(mean = mean(x), sd = sd(x)))
colnames(spores_stats_month) <- c("month", "spores")
print(spores_stats_month)

# average per month  and year + standard dev
spores_stats_month_year <- aggregate(spores$spores_gram, by = list(month = spores$month, year = spores$year), FUN = function(x) c(mean = mean(x), sd = sd(x)))
colnames(spores_stats_month_year) <- c("Month","Year", "spores")
print(spores_stats_month_year)

# average per sector + standard dev
spores_stats_sector <- aggregate(spores$spores_gram, by = list(sector_id = spores$sector_id), FUN = function(x) c(mean = mean(x), sd = sd(x)))
colnames(spores_stats_sector) <- c("sector", "spores")
print(arrange(spores_stats_sector, desc(spores_stats_sector[,2])))

# graphic average spore count per month and year
spores_stats_month_year_long <- pivot_longer(spores_stats_month_year, cols = spores, names_to = "stat", values_to = "value")
spores_month_year <- ggplot(data = spores_stats_month_year_long, aes(x = factor(Month), y = value[,"mean"], fill = factor(Year))) +
  geom_bar(stat = "identity", position=position_dodge(width=0.8)) +
  geom_errorbar(aes(ymin = value[,"mean"], ymax = value[,"mean"] + value[,"sd"]),
                position = position_dodge(width=0.8), width = 0.2) +
  scale_fill_manual(values = c("#4C81E0", "#E06B58", "#E0A72B", "#36E095")) +
  xlab("Month") +
  ylab("Mean spore count (spores / g) + Std. Dev.") +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.border = element_rect(color = "black", fill = NA, size = 1.5)
  ) +    scale_y_continuous(labels = scales::comma) +
  guides(fill = guide_legend(title = "Year"));spores_month_year# add a legend title

"""# ------------------------------ Part II ------------------------------
## Considering only sectors with associated meteorological station

### Calculating daily average values and per station/sector from hourly measurements
"""

# temperature
daily_temp<- aggregate(temperature_c ~ station_id + date, data = meteo, FUN = mean)
# humidity
daily_humid<- aggregate(rel_humidity_pctg ~ station_id + date, data = meteo, FUN = mean)

# merge with stationsupdate for sector allocation
clima <- merge(daily_temp, daily_humid[, c("station_id", "date", "rel_humidity_pctg")], by = c("station_id", "date"), all.x = TRUE, all = TRUE)
clima <- merge(clima, stationsupdate[, c("station_id", "sector_id")], by = c("station_id"))

"""## Calculating consecutive days above threshold from original Hypothesis that is used for risk prediction so far

### üå°Ô∏è Temperature above 16¬∞C
"""

counter <- 0

# Group the data frame by station_id and loop through each group
for (group in split(daily_temp, daily_temp$station_id)) {
  # Set the counter column of the current group to 0
  group$counter <- 0
  # Loop through the rows of the current group
  for (i in 1:nrow(group)) {
    # Check if the temperature is equal or higher than 16
    if (group$temperature_c[i] >= 16) {
      # Increment the counter variable
      counter <- counter + 1
    } else {
      # Reset the counter variable to 0
      counter <- 0
    }
    # Set the value of the counter column for the current row to the value of the counter variable
    group$counter[i] <- counter
  }
  # Assign the updated group back to the original data frame
  daily_temp[daily_temp$station_id == unique(group$station_id), "temp16_d"] <- group$counter
}

# merge with clima data frame
clima <- merge(clima, daily_temp[, c("temp16_d", "station_id","date")], by = c("station_id","date"))

"""### üåßÔ∏è Humidity above 90%"""

counter <- 0

# Group the data frame by station_id and loop through each group
for (group in split(daily_humid, daily_humid$station_id)) {
  # Set the counter column of the current group to 0
  group$counter <- 0
  # Loop through the rows of the current group
  for (i in 1:nrow(group)) {
    # Check if the humiderature is equal or higher than 16
    if (group$rel_humidity_pctg[i] >= 90) {
      # Increment the counter variable
      counter <- counter + 1
    } else {
      # Reset the counter variable to 0
      counter <- 0
    }
    # Set the value of the counter column for the current row to the value of the counter variable
    group$counter[i] <- counter
  }
  # Assign the updated group back to the original data frame
  daily_humid[daily_humid$station_id == unique(group$station_id), "humid90_d"] <- group$counter
}

clima <- merge(clima, daily_humid[, c("humid90_d", "station_id","date")], by = c("station_id","date"))
length(unique(clima$station_id)) # 32 sectors, one sector without spore count samples

# show data frame to check results
head(clima)

"""## Calculating sporulation risk
- both variables 0 consecutive days above thresholds 25% risk </br>
- both variables at least 1 day above thresholds 50% </br>
- both variables at least 2 days above thresholds 75% </br>
- both variables at least 3 days above thresholds 100%
"""

#calculate the risk
clima$risk <- ifelse((clima$temp16_d == 0 & clima$humid90_d == 0), 25,
                     ifelse((clima$temp16_d == 1 & clima$humid90_d == 1) | (clima$temp16_d >= 1 & clima$humid90_d == 1) | (clima$temp16_d == 1 & clima$humid90_d >= 1) , 50,
                            ifelse((clima$temp16_d == 2 & clima$humid90_d == 2) | (clima$temp16_d >= 2 & clima$humid90_d == 2) | (clima$temp16_d == 2 & clima$humid90_d >= 2), 75,
                                   ifelse(clima$temp16_d >= 3 & clima$humid90_d >= 3, 100, 25))))

"""Plot to validate if it worked"""

# Create a clustered bar plot
ggplot(clima, aes(x = factor(station_id), fill = factor(risk))) +
  geom_bar(position = "dodge") +
  labs(x = "Sector ID", y = "Count", fill = "risk")

"""## Create data frame for number of risk of sporulation days per sector"""

# calulate how many times each sector had risk alerts at which level
riskmap100 <- aggregate(risk ~ station_id, data = clima, FUN = function(x) sum(x == 100))
riskmap75 <- aggregate(risk ~ station_id, data = clima, FUN = function(x) sum(x == 75))
riskmap50 <- aggregate(risk ~ station_id, data = clima, FUN = function(x) sum(x == 50))
riskmap25 <- aggregate(risk ~ station_id, data = clima, FUN = function(x) sum(x == 25))
# merge to a df
riskmap <- merge(riskmap100, riskmap75, by = "station_id", all = TRUE)
riskmap <- merge(riskmap, riskmap50, by = "station_id", all = TRUE)
riskmap <- merge(riskmap, riskmap25, by = "station_id", all = TRUE)
# Rename the columns
names(riskmap) <- c("station_id", "risk100", "risk75", "risk50", "risk25")
# merge risk with location
riskmap <- merge(riskmap, stations[, c("latitude_deg", "longitude_deg","station_id")], by = c("station_id"), all.x = TRUE)
# add sector_id to riskmap and keep all other stations
riskmap <- merge(riskmap, stationsupdate[, c("sector_id", "station_id")], by = "station_id", all.x = TRUE)
head(riskmap)

"""## Merging number of risk days with average spore count per sector"""

# average spore count
avg_sectors<- aggregate(spores_gram ~ sector_id, data = spores, FUN = mean)
sd_sectors<- aggregate(spores_gram ~ sector_id, data = spores, FUN = sd)
names(avg_sectors) <- c("sector_id", "avg_spores_gram")
names(sd_sectors) <- c("sector_id", "sd_spores_gram")
avg_sectors<- merge(avg_sectors, sd_sectors[, c("sector_id", "sd_spores_gram")], by = c("sector_id"))

# merge with risk prediction
riskmap <- merge(riskmap, avg_sectors[, c("avg_spores_gram","sd_spores_gram","sector_id")], by = c("sector_id"), all.x = TRUE)
head(riskmap %>% arrange(desc(risk100)))

"""## Plotting risk map"""

# Get the bounding box for Terceira from file with coordinates for spore samples
bbox <- make_bbox(map_expansion$longitude, map_expansion$latitude, f = 0.1)

# Get the map
map <- get_map(location = bbox, maptype = "terrain")

alertmap <- ggmap(map) +
  geom_point(data = riskmap, aes(x = longitude_deg, y = latitude_deg, fill = risk100), color = "black", shape = 21, size = 5) +
  geom_point(data = riskmap[!is.na(riskmap$avg_spores_gram), ], aes(x = longitude_deg, y = latitude_deg, fill = avg_spores_gram), color = "black", shape = 21, size = 5) +
  # colour can be adapted here
  scale_fill_gradient(low = "white", high = "red", na.value = "white") +
  labs(fill = "Days of high risk") +
  geom_text(data = riskmap, aes(x = longitude_deg, y = latitude_deg, label = ifelse(risk100 >= 0 | risk100 == 0, sector_id, "")),
            size = 2, color = "black") +
  theme_minimal()
plot(alertmap)

"""## Plotting average spore counts (only sectors with associated meteorological station)"""

sporulationmap <- ggmap(map) +
  geom_point(data = riskmap[!is.na(riskmap$avg_spores_gram), ], aes(x = longitude_deg, y = latitude_deg, fill = avg_spores_gram), color = "black", shape = 21, size = 5) +
  # colour can be adapted here, I have chosen brown here to distinguish between the average number of spores and the risk days.
  scale_fill_gradient(low = "white", high = "brown", na.value = "white") +
  labs(fill = "Average spores count") +
  geom_text(data = riskmap, aes(x = longitude_deg, y = latitude_deg, label = ifelse(avg_spores_gram >= 0 | avg_spores_gram == 0, sector_id, "")),
            size = 2, color = "black") +
  theme_minimal()
plot(sporulationmap)

"""## Showing sectors that have extremely high spore counts that seemed abnormal (>500.000 spores per gram)"""

# Get the bounding box for the data
bbox <- make_bbox(map_expansion$longitude, map_expansion$latitude, f = c(.1, .1))

# Get the map, possible to change type of map
map <- get_map(location = bbox, maptype = "terrain")

# subset sectors with associated meteo station even if there were no spore counts collected
meteospores <- subset(spores, sector_id %in% c("B15", "C5", "D21", "E8", "F21", "G21", "H23", "H28", "I18", "I23", "J2", "J25", "K19", "K21", "K23",
                                               "K3", "K4", "L19", "L23", "L24", "L4", "L8", "M21", "M8", "N20", "N23", "O17", "O22", "O7", "O9", "P8", "Q22"))
# subset sectors witih extremely high spore counts
highmeteospores <- meteospores %>% filter(spores_gram > 500000)

# plot outliers with sporulation values higher than 500.000 spores per gram in red
meteooutliers <- ggmap(map) +
  geom_point(aes(x = longitude, y = latitude), data = meteospores, size = 1, alpha = 0.5) +
  geom_point(aes(x = longitude, y = latitude), data = highmeteospores, size = 1, alpha = 1, col = "red") +
  geom_text(aes(x = longitude, y = latitude, label = sector_id), data = highmeteospores, size = 3, vjust = -0.2, hjust = -0.2, col = "red") +
  theme(plot.title = element_text(size = 10),
        axis.ticks = element_line())

plot(meteooutliers)

"""## Correlation between risk prediction and sporulation"""

# prepare spores data frame
spores <- merge(spores, stationsupdate[, c("sector_id", "station_id")], by = "sector_id") # 1886 spore counts with sector, 967 with matching meteo station
spores <- merge(spores, daily_temp[, c("temperature_c", "temp16_d", "station_id", "date")], by = c("station_id","date"))
spores <- merge(spores, daily_humid[, c("rel_humidity_pctg", "humid90_d", "station_id","date")], by = c("station_id","date"))
spores$risk <- ifelse((spores$temp16_d == 0 & spores$humid90_d == 0), 25,
                      ifelse((spores$temp16_d == 1 & spores$humid90_d == 1) | (spores$temp16_d >= 1 & spores$humid90_d == 1) | (spores$temp16_d == 1 & spores$humid90_d >= 1) , 50,
                             ifelse((spores$temp16_d == 2 & spores$humid90_d == 2) | (spores$temp16_d >= 2 & spores$humid90_d == 2) | (spores$temp16_d == 2 & spores$humid90_d >= 2), 75,
                                    ifelse(spores$temp16_d >= 3 & spores$humid90_d >= 3, 100, 25))))

# prepare correlation calculation
corr_table <- as.data.frame(unique(spores$sector_id))
names(corr_table) <- c("sector_id")
corr_table$spores_gram_count <- NA
corr_table$correlation <- NA
corr_table$p_value <- NA
corr_table$r_squared <- NA

# calculate correlation for each spore count with risk prediction for that day
for (i in seq_along(corr_table$sector_id)) {
  group <- spores[spores$sector_id == corr_table$sector_id[i], ]

  corr_table$spores_gram_count[i] <- nrow(group)

  corr_result <- cor.test(group$risk, group$spores_gram)
  corr_table$correlation[i] <- corr_result$estimate

  corr_table$p_value[i] <- corr_result$p.value

  test_result <- cor.test(group$risk, group$spores_gram)
  corr_table$r_squared[i] <- test_result$estimate^2
}

# print table
print(corr_table[order(corr_table$correlation, decreasing = TRUE), ])

"""## Sectors with best and worst correlation between risk prediction and spore counts.
- best **prediction**
"""

# add spores count to clima data frame
clima <- merge(clima, spores[, c("spores_gram", "station_id", "date")], by = c("station_id", "date"), all.x = TRUE)
# subset sector with best risk prediction K21
spores_K21 <- subset(clima, station_id == "DL_SHT35_9595_70B3D57BA000257B")
# plot temperature, humidity and spore count
k21_plot <- ggplot(spores_K21, aes(x = date)) +
  geom_smooth(aes(y = temperature_c, color = "Temperature"),method="loess",size=0.8) +
  geom_line(aes(y = temperature_c, color = "Temperature"),size=0.2) +
  geom_smooth(aes(y = rel_humidity_pctg, color = "Humidity"),method="loess",size=0.8) +
  geom_line(aes(y = rel_humidity_pctg, color = "Humidity"), size = 0.2) +
  geom_point(aes(y = spores_gram * 0.0001), color = "green", size = 1) +
  scale_color_manual(
    values = c(Temperature = "red", Humidity = "blue"),
    labels = c(Temperature = "Temperature (¬∞C)", Humidity = "Relative Humidity (%)")
  ) +
  scale_y_continuous(sec.axis = sec_axis(trans = ~.*10000, name = "Spores (per gram)"), limits = c(0, 100)) +
  scale_x_date(limits = as.Date(c("2022-03-01", "2023-05-01")), date_labels = "%b '%y") +
  xlab("") +
  ylab("Temperature/Humidity") +
  theme_bw()+
  theme(
    legend.position = "bottom",
    legend.box = "horizontal",
    legend.title = element_blank(),
    axis.ticks.length = unit(-0.1, "cm"),
    plot.title = element_text(size = 10)
  )+
  labs(title = "Sector K21"); k21_plot

"""- worst prediction"""

# subset sector with worst risk prediction C5
spores_C5 <- subset(clima, station_id == "NVX_R712_00137A1000015798")
# plot temperature, humidity and spore count
c5_plot <- ggplot(spores_C5, aes(x = date)) +
  geom_smooth(aes(y = temperature_c, color = "Temperature"), method = "loess") +
  geom_line(aes(y = temperature_c, color = "Temperature"), size = 0.2) +
  geom_smooth(aes(y = rel_humidity_pctg, color = "Humidity"), method = "loess") +
  geom_line(aes(y = rel_humidity_pctg, color = "Humidity"), size = 0.2) +
  geom_point(aes(y = spores_gram * 0.0001), color = "green", size = 1) +
  scale_color_manual(
    values = c(Temperature = "red", Humidity = "blue"),
    labels = c(Temperature = "Temperature (¬∞C)", Humidity = "Relative Humidity (%)")
  ) +
  scale_y_continuous(sec.axis = sec_axis(trans = ~.*10000, name = "Spores (per gram)"), limits = c(0, 100)) +
  scale_x_date(limits = as.Date(c("2022-03-01", "2023-05-01")), date_labels = "%b '%y") +
  xlab("Date") +
  ylab("Temperature/Humidity") +
  theme_bw() +
  theme(
    legend.position = "bottom",
    legend.box = "horizontal",
    legend.title = element_blank(),
    axis.ticks.length = unit(-0.1, "cm"),
    plot.title = element_text(size = 10)
  ) +
  labs(title = "Sector C5"); c5_plot

"""- all sectors in one plot"""

meteo_all <- ggplot(clima, aes(x = date)) +
  geom_smooth(aes(y = temperature_c, color = "Temperature"),method="gam") +
  geom_line(aes(y = temperature_c, color = "Temperature"),size=0.2) +
  geom_smooth(aes(y = rel_humidity_pctg, color = "Humidity"),method="gam") +
  geom_line(aes(y = rel_humidity_pctg, color = "Humidity"), size = 0.2) +
  geom_point(aes(y = spores_gram * 0.0001), color = "green", size = 1) +
  scale_color_manual(
    values = c(Temperature = "red", Humidity = "blue"),
    labels = c(Temperature = "Temperature (¬∞C)", Humidity = "Relative Humidity (%)")) +
  scale_y_continuous(sec.axis = sec_axis(trans = ~.*10000, name = "Spores / gram")) +
  scale_x_date(date_labels = "%b '%y") +
  xlab("Date") +
  ylab("Temperature / Humidity") +
  theme_bw()+
  theme(legend.position = "bottom",
        legend.box = "horizontal",
        legend.title = element_blank(),
        axis.ticks.length = unit(-0.1, "cm")); meteo_all

"""# ------------------------------ Part III ------------------------------
## Improvement of thresholds
### In this part, I have tried to find a different combination of thresholds that would lead to better risk prediction.

## Calculating consecutive days for all temperature thresholds between 13¬∞C and 24¬∞C
"""

##  consecutive days for all temp  ####

for (t in 13:24) {
  counter <- 0

  # Group the data frame by station_id and loop through each group
  for (group in split(daily_temp, daily_temp$station_id)) {
    # Set the counter column of the current group to 0
    group$counter <- 0
    # Loop through the rows of the current group
    for (i in 1:nrow(group)) {
      # Check if the temperature is equal or higher than 16
      if (group$temperature_c[i] >= t) {
        # Increment the counter variable
        counter <- counter + 1
      } else {
        # Reset the counter variable to 0
        counter <- 0
      }
      # Set the value of the counter column for the current row to the value of the counter variable
      group$counter[i] <- counter
    }
    # Assign the updated group back to the original data frame
    daily_temp[daily_temp$station_id == unique(group$station_id), paste0("temp", t)] <-
      group$counter
  }

  spores <-
    merge(spores, daily_temp[, c(paste0("temp", t), "station_id", "date")], by = c("station_id", "date"))
}

"""## Calculating consecutive days for all humidity thresholds between 70% and 90%."""

#### consecutive days all humidity ####
for (h in 70:100) {
  counter <- 0

  # Group the data frame by station_id and loop through each group
  for (group in split(daily_humid, daily_humid$station_id)) {
    # Set the counter column of the current group to 0
    group$counter <- 0
    # Loop through the rows of the current group
    for (i in 1:nrow(group)) {
      # Check if the temperature is equal or higher than 16
      if (group$rel_humidity_pctg[i] >= h) {
        # Increment the counter variable
        counter <- counter + 1
      } else {
        # Reset the counter variable to 0
        counter <- 0
      }
      # Set the value of the counter column for the current row to the value of the counter variable
      group$counter[i] <- counter
    }
    # Assign the updated group back to the original data frame
    daily_humid[daily_humid$station_id == unique(group$station_id), paste0("humid", h)] <-
      group$counter
  }

  spores <-
    merge(spores, daily_humid[, c(paste0("humid", h), "station_id", "date")], by = c("station_id", "date"))

}

"""## Calculation of the correlation of all combinations of threshold values with the spore counts"""

## risk and correlation ####
corr_list <- list() # create an empty list to store the correlations

for (t in 13:24) {
  for (h in 70:100) {
    # add column for risk of sporulation
    spores[[paste0("temp", t, "humid", h)]] <- ifelse(spores[[paste0("temp", t)]] == 0 & spores[[paste0("humid", h)]] == 0, 25,
                                                      ifelse(spores[[paste0("temp", t)]] == 1 & spores[[paste0("humid", h)]] == 1 | (spores[[paste0("temp", t)]] >= 1 & spores[[paste0("humid", h)]] == 1) | (spores[[paste0("temp", t)]] == 1 & spores[[paste0("humid", h)]] >= 1), 50,
                                                             ifelse(spores[[paste0("temp", t)]] == 2 & spores[[paste0("humid", h)]] == 2 | (spores[[paste0("temp", t)]] >= 2 & spores[[paste0("humid", h)]] == 2) | (spores[[paste0("temp", t)]] == 2 & spores[[paste0("humid", h)]] >= 2), 75,
                                                                    ifelse(spores[[paste0("temp", t)]] >= 3 & spores[[paste0("humid", h)]] >= 3, 100, 25))))
    corr <- cor(spores$spores_gram, spores[[paste0("temp", t, "humid", h)]])
    corr_list[[paste0("temp", t, "humid", h)]] <- corr
  }
}

corr_df <- data.frame(
  combination = names(corr_list),
  correlation = unlist(corr_list))

"""## Plot risk from thesholds of original hypothesis and spore counts



"""

#original Hypothesis
cor.test(spores$temp16humid90, spores$spores_gram)
H0 <- ggplot(spores, aes(x = temp16humid90, y = spores_gram)) +
  geom_point() +
  labs(x = "Risk of Sporulation (%)", y = "Spore Count (g)") +
  ggtitle("H0: Thresholds = 16¬∞C and 90% Rel. Humidity")+
  theme(panel.background = element_rect(fill = "white"),panel.border = element_rect(color = "black", fill = NA,  size = 1))+
  scale_y_continuous(labels = scales::comma, limits = c(0, 2000000))+
  scale_x_continuous(breaks = c(25, 50, 75, 100));H0

"""## List of best correlations of the combination of thresholds with spore counts
- print rank of H0
- print top 10
"""

# Order corr_df based on the correlation column
ordered_corr_df <- corr_df[order(corr_df$correlation, decreasing = TRUE), ]
# Find the row index with the combination of the original Hypothesis "temp16humid90"
row_index <- which(ordered_corr_df$combination == "temp16humid90")
cat("Combination of thresholds from Hypothesis 0 ranks:", row_index,  "\n")
top_10_combinations <- head(corr_df[order(-corr_df$correlation), ], 10); print(top_10_combinations)

"""## Plot risk of best combination of thresholds and spore counts

"""

#Calculations for best combination ####
print(cor.test(spores$temp16humid76, spores$spores_gram))
top1 <- ggplot(spores, aes(x = temp16humid76, y = spores_gram)) +
  geom_point() +
  labs(x = "Risk of Sporulation (%)", y = "Spore Count (g)") +
  ggtitle("Top 1: Thresholds = 16¬∞C and 76% Rel. Humidity")+
  theme(panel.background = element_rect(fill = "white"),panel.border = element_rect(color = "black", fill = NA,  size = 1))+
  scale_y_continuous(labels = scales::comma, limits = c(0, 2000000))+
  scale_x_continuous(breaks = c(25, 50, 75, 100))
top1

"""## Calculation of how many correctly predicted sporulation events would have happened with best combination of correlation
- Evaluation of risk prediction with thresholds of original hypothesis  (16¬∞C and 90% humidity)
"""

# No. of spore samples
sum(spores$spores_gram >= 0) #659
# No. of sporulation events
sum(spores$spores_gram > 0) #377
# No. of correctly predicted sporulation events (H0)
sum(spores$temp16humid90  > 25 & spores$spores_gram > 0) #109
# No. of wrongly predicted sporulation events (H0)
sum(spores$temp16humid90 == 25 & spores$spores_gram > 0) #268

"""- Evaluation of prediction with thresholds with best correlation (16¬∞C and 76% humidity)"""

# No. of correctly predicted sporulation events (H1)
sum(spores$temp16humid76  > 25 & spores$spores_gram > 0) #217
# No. of wrongly predicted sporulation events (H1)
sum(spores$temp16humid76 == 25 & spores$spores_gram > 0) #160